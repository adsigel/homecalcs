'use client'

import { useState, useEffect } from 'react'
import { Property, PropertiesCollection } from '@/types/property'
import { 
  FiveYearAssumptions, 
  PortfolioAnalysis, 
  PropertyAnalysis,
  generateKeepVsSwitchAnalysis 
} from '@/utils/fiveYearAnalysis'
import { Line } from 'react-chartjs-2'
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js'

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler
)

interface FiveYearAnalysisProps {
  propertiesCollection: PropertiesCollection
}

export default function FiveYearAnalysis({ propertiesCollection }: FiveYearAnalysisProps) {
  const [assumptions, setAssumptions] = useState<FiveYearAssumptions>({
    homePriceAppreciation: 3.0,
    annualRentGrowth: 2.0,
    annualInflationRate: 2.5
  })
  
  const [portfolioAnalysis, setPortfolioAnalysis] = useState<PortfolioAnalysis | null>(null)
  const [hiddenProperties, setHiddenProperties] = useState<Set<string>>(new Set())
  const [editingProperties, setEditingProperties] = useState<Set<string>>(new Set())
  const [customAssumptions, setCustomAssumptions] = useState<Record<string, FiveYearAssumptions>>({})

  useEffect(() => {
    if (propertiesCollection.properties.length > 0) {
      // Create properties with custom assumptions applied
      const propertiesWithCustomAssumptions = propertiesCollection.properties.map(property => ({
        ...property,
        customAssumptions: customAssumptions[property.id] || null
      }))
      
      const analysis = generateKeepVsSwitchAnalysis(propertiesWithCustomAssumptions, assumptions)
      setPortfolioAnalysis(analysis)
    }
  }, [propertiesCollection.properties, assumptions, customAssumptions])

  const handleAssumptionChange = (field: keyof FiveYearAssumptions, value: number) => {
    const newAssumptions = { ...assumptions, [field]: value }
    setAssumptions(newAssumptions)
    
    if (propertiesCollection.properties.length > 0) {
      const analysis = generateKeepVsSwitchAnalysis(propertiesCollection.properties, newAssumptions)
      setPortfolioAnalysis(analysis)
    }
  }

  const togglePropertyVisibility = (propertyId: string) => {
    setHiddenProperties(prev => {
      const newSet = new Set(prev)
      if (newSet.has(propertyId)) {
        newSet.delete(propertyId)
      } else {
        newSet.add(propertyId)
      }
      return newSet
    })
  }

  const togglePropertyEditing = (propertyId: string) => {
    setEditingProperties(prev => {
      const newSet = new Set(prev)
      if (newSet.has(propertyId)) {
        newSet.delete(propertyId)
      } else {
        newSet.add(propertyId)
      }
      return newSet
    })
  }

  const handlePropertyAssumptionChange = (propertyId: string, field: keyof FiveYearAssumptions, value: number) => {
    setCustomAssumptions(prev => {
      const current = prev[propertyId] || { ...assumptions }
      const updated = { ...current, [field]: value }
      return { ...prev, [propertyId]: updated }
    })
  }

  const toggleGlobalAssumptions = (propertyId: string, useGlobal: boolean) => {
    if (useGlobal) {
      // Remove custom assumptions for this property
      setCustomAssumptions(prev => {
        const newAssumptions = { ...prev }
        delete newAssumptions[propertyId]
        return newAssumptions
      })
    } else {
      // Initialize custom assumptions with current global values
      setCustomAssumptions(prev => ({
        ...prev,
        [propertyId]: { ...assumptions }
      }))
    }
  }

  const savePropertyAssumptions = (propertyId: string) => {
    // Update the property in the collection with custom assumptions
    const updatedProperties = propertiesCollection.properties.map(property => {
      if (property.id === propertyId) {
        return {
          ...property,
          customAssumptions: customAssumptions[propertyId] || null
        }
        // Note: In a real app, you'd save this to your database here
      }
      return property
    })
    
    // Update the collection (this would typically be done through a context or prop)
    // For now, we'll just close the editing mode
    setEditingProperties(prev => {
      const newSet = new Set(prev)
      newSet.delete(propertyId)
      return newSet
    })
  }

  // Get visible properties for analysis
  const visibleProperties = portfolioAnalysis?.properties.filter(p => p && !hiddenProperties.has(p.propertyId)) || []
  const visiblePropertiesWithData = visibleProperties.filter(p => p?.hasSufficientData)

  // Debug logging for hidden properties changes
  useEffect(() => {
    console.log('Hidden properties changed:', Array.from(hiddenProperties))
    console.log('Visible properties:', visibleProperties.map(p => p?.propertyName))
  }, [hiddenProperties, visibleProperties])

  if (!portfolioAnalysis) {
    return (
      <div className="p-6 bg-gray-50 rounded-lg border border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">5-Year Analysis</h3>
        <p className="text-gray-600">Loading analysis...</p>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Global Assumptions Panel */}
      <div className="bg-white p-6 rounded-lg border border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Analysis Assumptions</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Home Price Appreciation (%)
            </label>
            <input
              type="number"
              step="0.1"
              value={assumptions.homePriceAppreciation}
              onChange={(e) => handleAssumptionChange('homePriceAppreciation', parseFloat(e.target.value) || 0)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Annual Rent Growth (%)
            </label>
            <input
              type="number"
              step="0.1"
              value={assumptions.annualRentGrowth}
              onChange={(e) => handleAssumptionChange('annualRentGrowth', parseFloat(e.target.value) || 0)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Annual Inflation Rate (%)
            </label>
            <input
              type="number"
              step="0.1"
              value={assumptions.annualInflationRate}
              onChange={(e) => handleAssumptionChange('annualInflationRate', parseFloat(e.target.value) || 0)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
            />
          </div>
        </div>
      </div>

      {/* Decision Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <h4 className="text-sm font-medium text-gray-600 mb-1">Current Property Value</h4>
          <p className="text-2xl font-bold text-gray-900">
            ${portfolioAnalysis.totalPortfolioValue.toLocaleString()}
          </p>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <h4 className="text-sm font-medium text-gray-600 mb-1">5-Year Equity Growth</h4>
          <p className="text-2xl font-bold text-green-600">
            +${portfolioAnalysis.totalEquityGrowth.toLocaleString()}
          </p>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <h4 className="text-sm font-medium text-gray-600 mb-1">5-Year Cash Flow</h4>
          <p className={`text-2xl font-bold ${portfolioAnalysis.totalCumulativeCashFlow >= 0 ? 'text-green-600' : 'text-red-600'}`}>
            {portfolioAnalysis.totalCumulativeCashFlow >= 0 ? '+' : ''}${portfolioAnalysis.totalCumulativeCashFlow.toLocaleString()}
          </p>
        </div>
      </div>

      {/* Property Analysis Table */}
      <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold text-gray-900">Keep vs. Switch Analysis</h3>
              <p className="text-sm text-gray-600 mt-1">
                Compare your current property with up to 9 alternatives to make an informed decision
              </p>
            </div>
            <div className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
              {visiblePropertiesWithData.length} of {visibleProperties.length} visible properties
            </div>
          </div>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Show/Hide
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Property
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Current Value
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  5-Year Value
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Equity Growth
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Cash Flow
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Assumptions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200" key={hiddenProperties.size}>
              {visibleProperties
                .filter((property): property is PropertyAnalysis => property !== null)
                .map((property, index) => {
                  const isCurrentProperty = portfolioAnalysis.properties.findIndex(p => p?.propertyId === property.propertyId) === 0
                  return (
                    <tr key={property.propertyId} className={isCurrentProperty ? 'bg-blue-50' : ''}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <button
                          onClick={() => togglePropertyVisibility(property.propertyId)}
                          className={`p-2 rounded-md transition-colors ${
                            hiddenProperties.has(property.propertyId)
                              ? 'bg-gray-100 text-gray-400 hover:bg-gray-200'
                              : 'bg-green-100 text-green-600 hover:bg-green-200'
                          }`}
                          title={hiddenProperties.has(property.propertyId) ? 'Show property' : 'Hide property'}
                        >
                          {hiddenProperties.has(property.propertyId) ? (
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                            </svg>
                          ) : (
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                          )}
                        </button>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center gap-2">
                          <div className="text-sm font-medium text-gray-900">
                            {property.propertyName}
                          </div>
                          {isCurrentProperty && (
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                              Current
                            </span>
                          )}
                          {!isCurrentProperty && (
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              Alternative
                            </span>
                          )}
                        </div>
                        {!property.hasSufficientData && (
                          <div className="text-xs text-red-600 mt-1">
                            Missing: {property.missingDataFields.join(', ')}
                          </div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {property.hasSufficientData 
                          ? `$${property.projections[0]?.homeValue.toLocaleString() || 0}`
                          : 'N/A'
                        }
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {property.hasSufficientData 
                          ? `$${property.projections[5]?.homeValue.toLocaleString() || 0}`
                          : 'N/A'
                        }
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {property.hasSufficientData 
                          ? `+$${property.totalEquityGrowth.toLocaleString()}`
                          : 'N/A'
                        }
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {property.hasSufficientData 
                          ? (
                            <span className={property.totalCumulativeCashFlow >= 0 ? 'text-green-600' : 'text-red-600'}>
                              {property.totalCumulativeCashFlow >= 0 ? '+' : ''}${property.totalCumulativeCashFlow.toLocaleString()}
                            </span>
                          )
                          : 'N/A'
                        }
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <button
                          onClick={() => togglePropertyEditing(property.propertyId)}
                          className={`p-2 rounded-md transition-colors ${
                            editingProperties.has(property.propertyId)
                              ? 'bg-blue-100 text-blue-600 hover:bg-blue-200'
                              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                          }`}
                          title="Edit property assumptions"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                          </svg>
                        </button>
                      </td>
                    </tr>
                    

                      <tr>
                        <td colSpan={7} className="px-6 py-4 bg-gray-50">
                          <div className="space-y-4">
                            <div className="flex items-center justify-between">
                              <h4 className="text-sm font-medium text-gray-900">Property-Specific Assumptions</h4>
                              <button
                                onClick={() => savePropertyAssumptions(property.propertyId)}
                                className="px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                              >
                                Done
                              </button>
                            </div>
                            
                            <div className="flex items-center gap-3 mb-4">
                              <input
                                type="checkbox"
                                id={`global-${property.propertyId}`}
                                checked={!customAssumptions[property.propertyId]}
                                onChange={(e) => toggleGlobalAssumptions(property.propertyId, e.target.checked)}
                                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                              />
                              <label htmlFor={`global-${property.propertyId}`} className="text-sm text-gray-700">
                                Apply global assumptions
                              </label>
                            </div>
                            
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                  Home Price Appreciation (%)
                                </label>
                                <input
                                  type="number"
                                  step="0.1"
                                  min="0"
                                  max="50"
                                  value={customAssumptions[property.propertyId]?.homePriceAppreciation ?? assumptions.homePriceAppreciation}
                                  onChange={(e) => handlePropertyAssumptionChange(property.propertyId, 'homePriceAppreciation', parseFloat(e.target.value) || 0)}
                                  disabled={!customAssumptions[property.propertyId]}
                                  className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                                    !customAssumptions[property.propertyId] ? 'bg-gray-100 text-gray-500' : ''
                                  }`}
                                />
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                  Annual Rent Growth (%)
                                </label>
                                <input
                                  type="number"
                                  step="0.1"
                                  min="0"
                                  max="50"
                                  value={customAssumptions[property.propertyId]?.annualRentGrowth ?? assumptions.annualRentGrowth}
                                  onChange={(e) => handlePropertyAssumptionChange(property.propertyId, 'annualRentGrowth', parseFloat(e.target.value) || 0)}
                                  disabled={!customAssumptions[property.propertyId]}
                                  className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                                    !customAssumptions[property.propertyId] ? 'bg-gray-100 text-gray-500' : ''
                                  }`}
                                />
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                  Annual Inflation Rate (%)
                                </label>
                                <input
                                  type="number"
                                  step="0.1"
                                  min="0"
                                  max="50"
                                  value={customAssumptions[property.propertyId]?.annualInflationRate ?? assumptions.annualInflationRate}
                                  onChange={(e) => handlePropertyAssumptionChange(property.propertyId, 'annualInflationRate', parseFloat(e.target.value) || 0)}
                                  disabled={!customAssumptions[property.propertyId]}
                                  className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-ring-primary-500 ${
                                    !customAssumptions[property.propertyId] ? 'bg-gray-100 text-gray-500' : ''
                                  }`}
                                />
                              </div>
                            </div>
                          </div>
                        </td>
                      </tr>
                  )
                })}
            </tbody>
          </table>
        </div>
        
        {/* Expandable Assumptions Sections */}
        {visibleProperties
          .filter((property): property is PropertyAnalysis => property !== null)
          .map((property) => {
            if (!editingProperties.has(property.propertyId)) return null
            
            return (
              <div key={`assumptions-${property.propertyId}`} className="px-6 py-4 border-t border-gray-200 bg-gray-50">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="text-sm font-medium text-gray-900">Property-Specific Assumptions: {property.propertyName}</h4>
                    <button
                      onClick={() => savePropertyAssumptions(property.propertyId)}
                      className="px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                    >
                      Done
                    </button>
                  </div>
                  
                  <div className="flex items-center gap-3 mb-4">
                    <input
                      type="checkbox"
                      id={`global-${property.propertyId}`}
                      checked={!customAssumptions[property.propertyId]}
                      onChange={(e) => toggleGlobalAssumptions(property.propertyId, e.target.checked)}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <label htmlFor={`global-${property.propertyId}`} className="text-sm text-gray-700">
                      Apply global assumptions
                    </label>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Home Price Appreciation (%)
                      </label>
                      <input
                        type="number"
                        step="0.1"
                        min="0"
                        max="50"
                        value={customAssumptions[property.propertyId]?.homePriceAppreciation ?? assumptions.homePriceAppreciation}
                        onChange={(e) => handlePropertyAssumptionChange(property.propertyId, 'homePriceAppreciation', parseFloat(e.target.value) || 0)}
                        disabled={!customAssumptions[property.propertyId]}
                        className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                          !customAssumptions[property.propertyId] ? 'bg-gray-100 text-gray-500' : ''
                        }`}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Annual Rent Growth (%)
                      </label>
                      <input
                        type="number"
                        step="0.1"
                        min="0"
                        max="50"
                        value={customAssumptions[property.propertyId]?.annualRentGrowth ?? assumptions.annualRentGrowth}
                        onChange={(e) => handlePropertyAssumptionChange(property.propertyId, 'annualRentGrowth', parseFloat(e.target.value) || 0)}
                        disabled={!customAssumptions[property.propertyId]}
                        className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                          !customAssumptions[property.propertyId] ? 'bg-gray-100 text-gray-500' : ''
                        }`}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Annual Inflation Rate (%)
                      </label>
                      <input
                        type="number"
                        step="0.1"
                        min="0"
                        max="50"
                        value={customAssumptions[property.propertyId]?.annualInflationRate ?? assumptions.annualInflationRate}
                        onChange={(e) => handlePropertyAssumptionChange(property.propertyId, 'annualInflationRate', parseFloat(e.target.value) || 0)}
                        disabled={!customAssumptions[property.propertyId]}
                        className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                          !customAssumptions[property.propertyId] ? 'bg-gray-100 text-gray-500' : ''
                        }`}
                      />
                    </div>
                  </div>
                </div>
              </div>
            )
          })}
        
        {/* Property Picker */}
        {hiddenProperties.size > 0 && (
          <div className="px-6 py-4 border-t border-gray-200 bg-gray-50">
            <div className="flex items-center gap-3">
              <span className="text-sm text-gray-600">Add property to analysis:</span>
              <select
                onChange={(e) => {
                  if (e.target.value) {
                    const propertyId = e.target.value
                    console.log('Adding property back to analysis:', propertyId)
                    setHiddenProperties(prev => {
                      const newSet = new Set(prev)
                      newSet.delete(propertyId)
                      console.log('Updated hidden properties:', Array.from(newSet))
                      return newSet
                    })
                    // Reset selection after a brief delay to ensure state update
                    setTimeout(() => {
                      e.target.value = ''
                    }, 100)
                  }
                }}
                className="px-3 py-1 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                defaultValue=""
              >
                <option value="" disabled>Select a property...</option>
                {portfolioAnalysis.properties
                  .filter((p): p is PropertyAnalysis => p !== null && hiddenProperties.has(p.propertyId))
                  .map(property => (
                    <option key={property.propertyId} value={property.propertyId}>
                      {property.propertyName}
                    </option>
                  ))}
              </select>
              <span className="text-xs text-gray-500">
                {hiddenProperties.size} propert{hiddenProperties.size === 1 ? 'y' : 'ies'} hidden
              </span>
            </div>
          </div>
        )}
      </div>

      {/* Cash Flow Chart */}
      {visiblePropertiesWithData.length > 0 && (
        <div className="bg-white p-6 rounded-lg border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">5-Year Cash Flow Projections</h3>
          
          <div className="w-full h-80">
            <Line
              data={{
                labels: ['Year 0', 'Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5'],
                datasets: visiblePropertiesWithData
                  .filter((property): property is PropertyAnalysis => property !== null)
                  .map((property, index) => {
                    const color = index === 0 ? '#3b82f6' : ['#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4', '#84cc16', '#f97316', '#ec4899'][(index - 1) % 8]
                    
                    return {
                      label: property.propertyName,
                      data: [0, 1, 2, 3, 4, 5].map(year => {
                        const projection = property.projections[year]
                        return projection ? projection.cumulativeCashFlow : 0
                      }),
                      borderColor: color,
                      backgroundColor: color,
                      borderWidth: 3,
                      pointRadius: 4,
                      pointBackgroundColor: color,
                      pointBorderColor: 'white',
                      pointBorderWidth: 2,
                      tension: 0.1,
                      fill: false
                    }
                  })
              }}
              options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: {
                    position: 'top',
                    labels: {
                      usePointStyle: true,
                      padding: 20,
                      font: {
                        size: 12
                      }
                    }
                  },
                  tooltip: {
                    mode: 'index',
                    intersect: false,
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    titleColor: 'white',
                    bodyColor: 'white',
                    borderColor: 'rgba(255, 255, 255, 0.2)',
                    borderWidth: 1,
                    cornerRadius: 8,
                    displayColors: true,
                    callbacks: {
                      label: function(context) {
                        return `${context.dataset.label}: $${context.parsed.y.toLocaleString()}`
                      }
                    }
                  }
                },
                scales: {
                  x: {
                    grid: {
                      color: '#e5e7eb'
                    },
                    ticks: {
                      color: '#6b7280',
                      font: {
                        size: 12
                      }
                    }
                  },
                  y: {
                    grid: {
                      color: '#e5e7eb'
                    },
                    ticks: {
                      color: '#6b7280',
                      font: {
                        size: 12
                      },
                      callback: function(value) {
                        return `$${(value as number / 1000).toFixed(0)}k`
                      }
                    }
                  }
                },
                interaction: {
                  mode: 'nearest',
                  axis: 'x',
                  intersect: false
                },
                elements: {
                  point: {
                    hoverRadius: 6
                  }
                }
              }}
            />
          </div>
        </div>
      )}

      {/* Decision Recommendation */}
      {(() => {
        const currentProperty = visibleProperties.find(p => p && portfolioAnalysis.properties.findIndex(prop => prop?.propertyId === p.propertyId) === 0)
        const bestAlternative = visibleProperties
          .filter(p => p && portfolioAnalysis.properties.findIndex(prop => prop?.propertyId === p.propertyId) > 0)
          .reduce((best, current) => 
            current && (!best || current.irr > best.irr) ? current : best
          , null as PropertyAnalysis | null)
        
        return bestAlternative && currentProperty?.hasSufficientData ? (
          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Recommendation</h3>
            <div className="space-y-3">
              <div className="p-4 bg-gray-50 rounded-lg">
                <h4 className="font-medium text-gray-900 mb-2">Keep vs. Switch Analysis</h4>
                <div className="space-y-2 text-sm text-gray-700">
                  <p>
                    <strong>Current Property:</strong> {currentProperty.propertyName}
                  </p>
                  <p>
                    <strong>Best Alternative:</strong> {bestAlternative.propertyName}
                  </p>
                  <p>
                    <strong>Current Property Equity Growth:</strong> +${currentProperty.totalEquityGrowth.toLocaleString()}
                  </p>
                  <p>
                    <strong>Alternative Equity Growth:</strong> +${bestAlternative.totalEquityGrowth.toLocaleString()}
                  </p>
                  <p>
                    <strong>Current Property Cash Flow:</strong> +${currentProperty.totalCumulativeCashFlow.toLocaleString()}
                  </p>
                  <p>
                    <strong>Alternative Cash Flow:</strong> +${bestAlternative.totalCumulativeCashFlow.toLocaleString()}
                  </p>
                  <p className="text-gray-600 text-xs mt-2">
                    💡 Compare the total equity growth and cash flow projections to make your decision. 
                    Consider factors like location, property type, and your long-term goals.
                    {visibleProperties.length > 3 && ` You can analyze up to ${visibleProperties.length} properties simultaneously.`}
                    {hiddenProperties.size > 0 && ` ${hiddenProperties.size} properties are currently hidden.`}
                  </p>
                </div>
              </div>
            </div>
          </div>
        ) : null
      })()}




    </div>
  )
}
